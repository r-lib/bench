[{"path":[]},{"path":"https://bench.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://bench.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://bench.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://bench.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://bench.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://bench.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://bench.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://bench.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://bench.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://bench.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://bench.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://bench.r-lib.org/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 bench authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://bench.r-lib.org/dev/MAINTENANCE.html","id":"current-state","dir":"","previous_headings":"","what":"Current state","title":"NA","text":"CRAN version bench stable. dev version half finished continuous benchmarking code, either extended removed, see future directions discussion.","code":""},{"path":"https://bench.r-lib.org/dev/MAINTENANCE.html","id":"known-outstanding-issues","dir":"","previous_headings":"","what":"Known outstanding issues","title":"NA","text":"don’t think major known issues, possibly https://github.com/r-lib/bench/issues/112 able reproduce problem, though suspect due either byte code compilation CPU pipelining related issues fix.","code":""},{"path":"https://bench.r-lib.org/dev/MAINTENANCE.html","id":"future-directions","dir":"","previous_headings":"","what":"Future directions","title":"NA","text":"Continuous benchmarking - feature development largely derailed COVID-19, originally proposed topic talk UseR!2020, conference went virtual became less priority. addition ursa labs conbench package provided good alternative done bench package (https://ursalabs.org/blog/announcing-conbench/) https://github.com/ursacomputing/arrowbench. Possible future directions talking arrow team bench features useful use cases extending bench functionality .","code":""},{"path":"https://bench.r-lib.org/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jim Hester. Author. Davis Vaughan. Author, maintainer. Drew Schmidt. Contributor.           read_proc_file implementation . Copyright holder, funder.","code":""},{"path":"https://bench.r-lib.org/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hester J, Vaughan D (2025). bench: High Precision Timing R Expressions. R package version 1.1.3.9000, https://github.com/r-lib/bench, https://bench.r-lib.org/.","code":"@Manual{,   title = {bench: High Precision Timing of R Expressions},   author = {Jim Hester and Davis Vaughan},   year = {2025},   note = {R package version 1.1.3.9000, https://github.com/r-lib/bench},   url = {https://bench.r-lib.org/}, }"},{"path":"https://bench.r-lib.org/dev/index.html","id":"bench","dir":"","previous_headings":"","what":"High Precision Timing of R Expressions","title":"High Precision Timing of R Expressions","text":"goal bench benchmark code, tracking execution time, memory allocations garbage collections.","code":""},{"path":"https://bench.r-lib.org/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"High Precision Timing of R Expressions","text":"can install release version CRAN : can install development version GitHub :","code":"install.packages(\"bench\") # install.packages(\"pak\") pak::pak(\"r-lib/bench\")"},{"path":"https://bench.r-lib.org/dev/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"High Precision Timing of R Expressions","text":"bench::mark() used benchmark one series expressions, feel number advantages alternatives. Always uses highest precision APIs available operating system (often nanoseconds). Tracks memory allocations expression. Tracks number type R garbage collections per expression iteration. Verifies equality expression results default, avoid accidentally benchmarking inequivalent code. bench::press(), allows easily perform combine benchmarks across large grid values. Uses adaptive stopping default, running expression set amount time rather specific number iterations. Expressions run batches summary statistics calculated filtering iterations garbage collections. allows isolate performance effects garbage collection running time (details see Neal 2014). times memory usage returned custom objects human readable formatting display (e.g. 104ns) comparisons (e.g. x$mem_alloc > \"10MB\"). also full support plotting ggplot2 including custom scales formatting.","code":""},{"path":[]},{"path":"https://bench.r-lib.org/dev/index.html","id":"benchmark","dir":"","previous_headings":"Usage","what":"bench::mark()","title":"High Precision Timing of R Expressions","text":"Benchmarks can run bench::mark(), takes one expressions benchmark . bench::mark() throw error results equivalent, don’t accidentally benchmark inequivalent code. Results easy interpret, human readable units. default summary uses absolute measures, however relative results can obtained using relative = TRUE call bench::mark() calling summary(relative = TRUE) results.","code":"library(bench) set.seed(42)  dat <- data.frame(   x = runif(10000, 1, 1000),   y = runif(10000, 1, 1000) ) bench::mark(   dat[dat$x > 500, ],   dat[which(dat$x > 499), ],   subset(dat, x > 500) ) #> Error: Each result must equal the first result: #> `dat[dat$x > 500, ]` does not equal `dat[which(dat$x > 499), ]` bnch <- bench::mark(   dat[dat$x > 500, ],   dat[which(dat$x > 500), ],   subset(dat, x > 500) ) bnch #> # A tibble: 3 × 6 #>   expression                     min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>                <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 dat[dat$x > 500, ]           151µs    202µs     4994.     377KB     36.8 #> 2 dat[which(dat$x > 500), ]    124µs    168µs     6169.     260KB     33.2 #> 3 subset(dat, x > 500)         184µs    232µs     3911.     510KB     40.3 summary(bnch, relative = TRUE) #> # A tibble: 3 × 6 #>   expression                  min median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>                <dbl>  <dbl>     <dbl>     <dbl>    <dbl> #> 1 dat[dat$x > 500, ]         1.22   1.20      1.28      1.45     1.11 #> 2 dat[which(dat$x > 500), ]  1      1         1.58      1        1    #> 3 subset(dat, x > 500)       1.48   1.38      1         1.96     1.21"},{"path":"https://bench.r-lib.org/dev/index.html","id":"benchpress","dir":"","previous_headings":"Usage","what":"bench::press()","title":"High Precision Timing of R Expressions","text":"bench::press() used run benchmarks grid parameters. Provide setup benchmarking code single unnamed argument define sets values named arguments. full combination values expanded benchmarks pressed together result. allows benchmark set expressions across wide variety input sizes, perform replications useful tasks.","code":"set.seed(42)  create_df <- function(rows, cols) {   out <- replicate(cols, runif(rows, 1, 100), simplify = FALSE)   out <- setNames(out, rep_len(c(\"x\", letters), cols))   as.data.frame(out) }  results <- bench::press(   rows = c(1000, 10000),   cols = c(2, 10),   {     dat <- create_df(rows, cols)     bench::mark(       min_iterations = 100,       bracket = dat[dat$x > 500, ],       which = dat[which(dat$x > 500), ],       subset = subset(dat, x > 500)     )   } ) #> Running with: #>    rows  cols #> 1  1000     2 #> 2 10000     2 #> 3  1000    10 #> 4 10000    10  results #> # A tibble: 12 × 8 #>    expression  rows  cols      min   median `itr/sec` mem_alloc `gc/sec` #>    <bch:expr> <dbl> <dbl> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #>  1 bracket     1000     2     27µs     34µs    27964.   15.84KB     19.6 #>  2 which       1000     2   25.7µs   33.4µs    29553.    7.91KB     17.7 #>  3 subset      1000     2   45.9µs   58.2µs    16793.    27.7KB     17.1 #>  4 bracket    10000     2   64.1µs   70.8µs    13447.  156.46KB     40.5 #>  5 which      10000     2   46.7µs   54.7µs    17586.   78.23KB     23.3 #>  6 subset     10000     2  116.2µs  132.1µs     7228.  273.79KB     40.9 #>  7 bracket     1000    10   77.2µs   85.4µs    11335.   47.52KB     19.9 #>  8 which       1000    10   67.8µs   75.2µs    13073.    7.91KB     23.2 #>  9 subset      1000    10   84.7µs  107.5µs     9281.   59.38KB     18.8 #> 10 bracket    10000    10  130.2µs  169.1µs     5799.   469.4KB     52.2 #> 11 which      10000    10   75.1µs     96µs    10187.   78.23KB     17.4 #> 12 subset     10000    10  222.7µs    253µs     3810.  586.73KB     43.3"},{"path":"https://bench.r-lib.org/dev/index.html","id":"plotting","dir":"","previous_headings":"","what":"Plotting","title":"High Precision Timing of R Expressions","text":"ggplot2::autoplot() can used generate informative default plot. plot colored gc level (0, 1, 2) faceted parameters (). default generates beeswarm plot, however can also specify plot types (jitter, ridge, boxplot, violin). See ?autoplot.bench_mark full details.  can also produce fully custom plots un-nesting results working data directly.","code":"ggplot2::autoplot(results) library(tidyverse)  results %>%   unnest(c(time, gc)) %>%   filter(gc == \"none\") %>%   mutate(expression = as.character(expression)) %>%   ggplot(aes(x = mem_alloc, y = time, color = expression)) +   geom_point() +   scale_color_bench_expr(scales::brewer_pal(type = \"qual\", palette = 3))"},{"path":"https://bench.r-lib.org/dev/index.html","id":"system_time","dir":"","previous_headings":"","what":"system_time()","title":"High Precision Timing of R Expressions","text":"bench also includes system_time(), higher precision alternative system.time().","code":"bench::system_time({   i <- 1   while (i < 1e7) {     i <- i + 1   } }) #> process    real  #>   1.73s    1.7s  bench::system_time(Sys.sleep(.5)) #> process    real  #>    58µs   497ms"},{"path":"https://bench.r-lib.org/dev/index.html","id":"alternatives","dir":"","previous_headings":"","what":"Alternatives","title":"High Precision Timing of R Expressions","text":"rbenchmark microbenchmark tictoc system.time()","code":""},{"path":"https://bench.r-lib.org/dev/reference/as_bench_mark.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce to a bench mark object Bench mark objects — as_bench_mark","title":"Coerce to a bench mark object Bench mark objects — as_bench_mark","text":"typically needed performing additional manipulations calling mark().","code":""},{"path":"https://bench.r-lib.org/dev/reference/as_bench_mark.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce to a bench mark object Bench mark objects — as_bench_mark","text":"","code":"as_bench_mark(x)"},{"path":"https://bench.r-lib.org/dev/reference/as_bench_mark.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce to a bench mark object Bench mark objects — as_bench_mark","text":"x Object coerced","code":""},{"path":"https://bench.r-lib.org/dev/reference/as_bench_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Human readable times — as_bench_time","title":"Human readable times — as_bench_time","text":"Construct, manipulate display vectors elapsed times seconds. numeric vectors, can compare numerically, can also compared human readable values '10ms'.","code":""},{"path":"https://bench.r-lib.org/dev/reference/as_bench_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Human readable times — as_bench_time","text":"","code":"as_bench_time(x)"},{"path":"https://bench.r-lib.org/dev/reference/as_bench_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Human readable times — as_bench_time","text":"x numeric character vector. Character representations can use shorthand sizes (see examples).","code":""},{"path":"https://bench.r-lib.org/dev/reference/as_bench_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Human readable times — as_bench_time","text":"","code":"as_bench_time(\"1ns\") #> [1] 1ns as_bench_time(\"1\") #> [1] 1s as_bench_time(\"1us\") #> [1] 1µs as_bench_time(\"1ms\") #> [1] 1ms as_bench_time(\"1s\") #> [1] 1s  as_bench_time(\"100ns\") < \"1ms\" #> [1] TRUE  sum(as_bench_time(c(\"1MB\", \"5MB\", \"500KB\"))) #> [1] NA"},{"path":"https://bench.r-lib.org/dev/reference/autoplot.bench_mark.html","id":null,"dir":"Reference","previous_headings":"","what":"Autoplot method for bench_mark objects — autoplot.bench_mark","title":"Autoplot method for bench_mark objects — autoplot.bench_mark","text":"Autoplot method bench_mark objects","code":""},{"path":"https://bench.r-lib.org/dev/reference/autoplot.bench_mark.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Autoplot method for bench_mark objects — autoplot.bench_mark","text":"","code":"autoplot.bench_mark(   object,   type = c(\"beeswarm\", \"jitter\", \"ridge\", \"boxplot\", \"violin\"),   ... )  # S3 method for class 'bench_mark' plot(x, ..., type = c(\"beeswarm\", \"jitter\", \"ridge\", \"boxplot\", \"violin\"), y)"},{"path":"https://bench.r-lib.org/dev/reference/autoplot.bench_mark.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Autoplot method for bench_mark objects — autoplot.bench_mark","text":"object bench_mark object. type type plot. Plotting geoms used type beeswarm - ggbeeswarm::geom_quasirandom() jitter - ggplot2::geom_jitter() ridge - ggridges::geom_density_ridges() boxplot - ggplot2::geom_boxplot() violin - ggplot2::geom_violin() ... Additional arguments passed plotting geom. x bench_mark object. y Ignored, required compatibility plot() generic.","code":""},{"path":"https://bench.r-lib.org/dev/reference/autoplot.bench_mark.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Autoplot method for bench_mark objects — autoplot.bench_mark","text":"function requires optional dependencies. ggplot2, tidyr, depending plot type ggbeeswarm, ggridges. type beeswarm jitter points colored highest level garbage collection performed iteration. plots 2 parameters ggplot2::facet_grid() used construct 2d facet. numbers parameters ggplot2::facet_wrap() used instead.","code":""},{"path":"https://bench.r-lib.org/dev/reference/autoplot.bench_mark.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Autoplot method for bench_mark objects — autoplot.bench_mark","text":"","code":"dat <- data.frame(x = runif(10000, 1, 1000), y=runif(10000, 1, 1000))  res <- bench::mark(   dat[dat$x > 500, ],   dat[which(dat$x > 500), ],   subset(dat, x > 500))  if (require(ggplot2) && require(tidyr) && require(ggbeeswarm)) {    # Beeswarm plot   autoplot(res)    # ridge (joyplot)   autoplot(res, \"ridge\")    # If you want to have the plots ordered by execution time you can do so by   # ordering factor levels in the expressions.   if (require(dplyr) && require(forcats)) {      res %>%       mutate(expression = forcats::fct_reorder(as.character(expression), min, .desc = TRUE)) %>%       as_bench_mark() %>%       autoplot(\"violin\")   } } #> Loading required package: ggplot2 #> Loading required package: tidyr #> Loading required package: ggbeeswarm #> Loading required package: dplyr #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union #> Loading required package: forcats"},{"path":"https://bench.r-lib.org/dev/reference/bench-package.html","id":null,"dir":"Reference","previous_headings":"","what":"bench: High Precision Timing of R Expressions — bench-package","title":"bench: High Precision Timing of R Expressions — bench-package","text":"Tools accurately benchmark analyze execution times R expressions.","code":""},{"path":[]},{"path":"https://bench.r-lib.org/dev/reference/bench-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"bench: High Precision Timing of R Expressions — bench-package","text":"Maintainer: Davis Vaughan davis@posit.co Authors: Jim Hester contributors: Drew Schmidt (read_proc_file implementation) [contributor] Posit Software, PBC [copyright holder, funder]","code":""},{"path":"https://bench.r-lib.org/dev/reference/bench-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"bench: High Precision Timing of R Expressions — bench-package","text":"","code":"dat <- data.frame(x = runif(10000, 1, 1000), y=runif(10000, 1, 1000))  # `bench::mark()` implicitly calls summary() automatically results <- bench::mark(   dat[dat$x > 500, ],   dat[which(dat$x > 500), ],   subset(dat, x > 500))  # However you can also do so explicitly to filter gc differently. summary(results, filter_gc = FALSE) #> # A tibble: 3 × 13 #>   expression           min median `itr/sec` mem_alloc `gc/sec` n_itr  n_gc #>   <bch:expr>         <bch> <bch:>     <dbl> <bch:byt>    <dbl> <int> <dbl> #> 1 dat[dat$x > 500, ] 150µs  156µs     3453.     374KB     31.4  1760    16 #> 2 dat[which(dat$x >… 135µs  142µs     4487.     258KB     27.4  2294    14 #> 3 subset(dat, x > 5… 201µs  213µs     2689.     492KB     31.7  1357    16 #> # ℹ 5 more variables: total_time <bch:tm>, result <list>, memory <list>, #> #   time <list>, gc <list>  # Or output relative times summary(results, relative = TRUE) #> # A tibble: 3 × 13 #>   expression           min median `itr/sec` mem_alloc `gc/sec` n_itr  n_gc #>   <bch:expr>         <dbl>  <dbl>     <dbl>     <dbl>    <dbl> <int> <dbl> #> 1 dat[dat$x > 500, ]  1.11   1.10      1.35      1.45     1.34  1744    16 #> 2 dat[which(dat$x >…  1      1         1.51      1        1     2280    14 #> 3 subset(dat, x > 5…  1.50   1.51      1         1.91     1.29  1341    16 #> # ℹ 5 more variables: total_time <bch:tm>, result <list>, memory <list>, #> #   time <list>, gc <list>"},{"path":"https://bench.r-lib.org/dev/reference/bench_bytes.html","id":null,"dir":"Reference","previous_headings":"","what":"Human readable memory sizes — bench_bytes","title":"Human readable memory sizes — bench_bytes","text":"Construct, manipulate display vectors byte sizes. numeric vectors, can compare numerically, can also compared human readable values '10MB'.","code":""},{"path":"https://bench.r-lib.org/dev/reference/bench_bytes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Human readable memory sizes — bench_bytes","text":"","code":"as_bench_bytes(x)  bench_bytes(x)"},{"path":"https://bench.r-lib.org/dev/reference/bench_bytes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Human readable memory sizes — bench_bytes","text":"x numeric character vector. Character representations can use shorthand sizes (see examples).","code":""},{"path":"https://bench.r-lib.org/dev/reference/bench_bytes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Human readable memory sizes — bench_bytes","text":"memory sizes always assumed base 1024, rather 1000.","code":""},{"path":"https://bench.r-lib.org/dev/reference/bench_bytes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Human readable memory sizes — bench_bytes","text":"","code":"bench_bytes(\"1\") #> [1] 1B bench_bytes(\"1K\") #> [1] 1KB bench_bytes(\"1Kb\") #> [1] 1KB bench_bytes(\"1KiB\") #> [1] 1KB bench_bytes(\"1MB\") #> [1] 1MB  bench_bytes(\"1KB\") < \"1MB\" #> [1] TRUE  sum(bench_bytes(c(\"1MB\", \"5MB\", \"500KB\"))) #> [1] 6.49MB"},{"path":"https://bench.r-lib.org/dev/reference/bench_bytes_trans.html","id":null,"dir":"Reference","previous_headings":"","what":"Benchmark time transformation — bench_bytes_trans","title":"Benchmark time transformation — bench_bytes_trans","text":"log transforms times formats labels bench_time object.","code":""},{"path":"https://bench.r-lib.org/dev/reference/bench_bytes_trans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Benchmark time transformation — bench_bytes_trans","text":"","code":"bench_bytes_trans(base = 2)"},{"path":"https://bench.r-lib.org/dev/reference/bench_bytes_trans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Benchmark time transformation — bench_bytes_trans","text":"base base logarithm","code":""},{"path":"https://bench.r-lib.org/dev/reference/bench_load_average.html","id":null,"dir":"Reference","previous_headings":"","what":"Get system load averages — bench_load_average","title":"Get system load averages — bench_load_average","text":"Uses OS system APIs return load average past 1, 5 15 minutes.","code":""},{"path":"https://bench.r-lib.org/dev/reference/bench_load_average.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get system load averages — bench_load_average","text":"","code":"bench_load_average()"},{"path":"https://bench.r-lib.org/dev/reference/bench_memory.html","id":null,"dir":"Reference","previous_headings":"","what":"Measure memory that an expression used. — bench_memory","title":"Measure memory that an expression used. — bench_memory","text":"Measure memory expression used.","code":""},{"path":"https://bench.r-lib.org/dev/reference/bench_memory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Measure memory that an expression used. — bench_memory","text":"","code":"bench_memory(expr)"},{"path":"https://bench.r-lib.org/dev/reference/bench_memory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Measure memory that an expression used. — bench_memory","text":"expr expression measured.","code":""},{"path":"https://bench.r-lib.org/dev/reference/bench_memory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Measure memory that an expression used. — bench_memory","text":"tibble two columns total amount memory allocated raw memory allocations parsed profmem::readRprofmem()","code":""},{"path":"https://bench.r-lib.org/dev/reference/bench_memory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Measure memory that an expression used. — bench_memory","text":"","code":"if (capabilities(\"profmem\")) {   bench_memory(1 + 1:10000) } #> # A tibble: 1 × 2 #>   mem_alloc memory             #>   <bch:byt> <list>             #> 1     117KB <Rprofmem [2 × 3]>"},{"path":"https://bench.r-lib.org/dev/reference/bench_process_memory.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the current and maximum memory from the R process — bench_process_memory","title":"Retrieve the current and maximum memory from the R process — bench_process_memory","text":"memory reported likely differ reported gc(), includes memory R process, including child processes memory allocated outside R's garbage collector heap.","code":""},{"path":"https://bench.r-lib.org/dev/reference/bench_process_memory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the current and maximum memory from the R process — bench_process_memory","text":"","code":"bench_process_memory()"},{"path":"https://bench.r-lib.org/dev/reference/bench_process_memory.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve the current and maximum memory from the R process — bench_process_memory","text":"OS APIs used follows","code":""},{"path":"https://bench.r-lib.org/dev/reference/bench_process_memory.html","id":"windows","dir":"Reference","previous_headings":"","what":"Windows","title":"Retrieve the current and maximum memory from the R process — bench_process_memory","text":"PROCESS_MEMORY_COUNTERS.WorkingSetSize PROCESS_MEMORY_COUNTERS.PeakWorkingSetSize","code":""},{"path":"https://bench.r-lib.org/dev/reference/bench_process_memory.html","id":"macos","dir":"Reference","previous_headings":"","what":"macOS","title":"Retrieve the current and maximum memory from the R process — bench_process_memory","text":"task_info(TASK_BASIC_INFO) rusage.ru_maxrss","code":""},{"path":"https://bench.r-lib.org/dev/reference/bench_process_memory.html","id":"linux","dir":"Reference","previous_headings":"","what":"linux","title":"Retrieve the current and maximum memory from the R process — bench_process_memory","text":"/proc/pid/status VmSize /proc/pid/status VmPeak","code":""},{"path":"https://bench.r-lib.org/dev/reference/bench_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Measure Process CPU and real time that an expression used. — bench_time","title":"Measure Process CPU and real time that an expression used. — bench_time","text":"Measure Process CPU real time expression used.","code":""},{"path":"https://bench.r-lib.org/dev/reference/bench_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Measure Process CPU and real time that an expression used. — bench_time","text":"","code":"bench_time(expr)"},{"path":"https://bench.r-lib.org/dev/reference/bench_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Measure Process CPU and real time that an expression used. — bench_time","text":"expr expression timed.","code":""},{"path":"https://bench.r-lib.org/dev/reference/bench_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Measure Process CPU and real time that an expression used. — bench_time","text":"bench_time object two values. process - process CPU usage expression evaluation. real - wallclock time expression evaluation.","code":""},{"path":"https://bench.r-lib.org/dev/reference/bench_time.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Measure Process CPU and real time that an expression used. — bench_time","text":"systems (macOS) process clock lower precision realtime clock, result may cases process time larger real time fast expressions.","code":""},{"path":[]},{"path":"https://bench.r-lib.org/dev/reference/bench_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Measure Process CPU and real time that an expression used. — bench_time","text":"","code":"# This will use ~.5 seconds of real time, but very little process time. bench_time(Sys.sleep(.5)) #> process    real  #>  63.1µs 500.6ms"},{"path":"https://bench.r-lib.org/dev/reference/bench_time_trans.html","id":null,"dir":"Reference","previous_headings":"","what":"Benchmark time transformation — bench_time_trans","title":"Benchmark time transformation — bench_time_trans","text":"log transforms times formats labels bench_time object.","code":""},{"path":"https://bench.r-lib.org/dev/reference/bench_time_trans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Benchmark time transformation — bench_time_trans","text":"","code":"bench_time_trans(base = 10)"},{"path":"https://bench.r-lib.org/dev/reference/bench_time_trans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Benchmark time transformation — bench_time_trans","text":"base base logarithm","code":""},{"path":"https://bench.r-lib.org/dev/reference/hires_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the current high-resolution real time. — hires_time","title":"Return the current high-resolution real time. — hires_time","text":"Time expressed seconds since arbitrary time past; correlated way time day, thus subject resetting drifting. hi-res timer ideally suited performance measurement tasks, cheap, accurate interval timing required.","code":""},{"path":"https://bench.r-lib.org/dev/reference/hires_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the current high-resolution real time. — hires_time","text":"","code":"hires_time()"},{"path":"https://bench.r-lib.org/dev/reference/hires_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return the current high-resolution real time. — hires_time","text":"","code":"hires_time() #> [1] 1737050349  # R rounds doubles to 7 digits by default, see greater precision by setting # the digits argument when printing print(hires_time(), digits = 20) #> [1] 1737050349.3388431072  # Generally used by recording two times and then subtracting them start <- hires_time() end <- hires_time() elapsed <- end - start elapsed #> [1] 0.0003802776"},{"path":"https://bench.r-lib.org/dev/reference/knit_print.bench_mark.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom printing function for bench_mark objects in knitr documents — knit_print.bench_mark","title":"Custom printing function for bench_mark objects in knitr documents — knit_print.bench_mark","text":"default, data columns (result, memory, time, gc) omitted printing knitr. like include columns, set knitr chunk option bench.all_columns = TRUE.","code":""},{"path":"https://bench.r-lib.org/dev/reference/knit_print.bench_mark.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom printing function for bench_mark objects in knitr documents — knit_print.bench_mark","text":"","code":"knit_print.bench_mark(x, ..., options)"},{"path":"https://bench.r-lib.org/dev/reference/knit_print.bench_mark.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Custom printing function for bench_mark objects in knitr documents — knit_print.bench_mark","text":"x R object printed ... Additional arguments passed S3 method. Currently ignored, except two optional arguments options inline; see references . options list knitr chunk options set currently evaluated chunk.","code":""},{"path":"https://bench.r-lib.org/dev/reference/knit_print.bench_mark.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Custom printing function for bench_mark objects in knitr documents — knit_print.bench_mark","text":"can set bench.all_columns = TRUE show columns bench mark object.","code":"```{r, bench.all_columns = TRUE} bench::mark(   subset(mtcars, cyl == 3),   mtcars[mtcars$cyl == 3, ] ) ```"},{"path":"https://bench.r-lib.org/dev/reference/mark.html","id":null,"dir":"Reference","previous_headings":"","what":"Benchmark a series of functions — mark","title":"Benchmark a series of functions — mark","text":"Benchmark list quoted expressions. expression always run least twice, measure memory allocation store results one times measure timing.","code":""},{"path":"https://bench.r-lib.org/dev/reference/mark.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Benchmark a series of functions — mark","text":"","code":"mark(   ...,   min_time = 0.5,   iterations = NULL,   min_iterations = 1,   max_iterations = 10000,   check = TRUE,   memory = capabilities(\"profmem\"),   filter_gc = TRUE,   relative = FALSE,   time_unit = NULL,   exprs = NULL,   env = parent.frame() )"},{"path":"https://bench.r-lib.org/dev/reference/mark.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Benchmark a series of functions — mark","text":"... Expressions benchmark, named expression column name, otherwise deparsed expression. min_time minimum number seconds run expression, set Inf always run max_iterations times instead. iterations NULL, default, run expression exactly number iterations. overrides min_iterations max_iterations. min_iterations expression evaluated minimum min_iterations times. max_iterations expression evaluated maximum max_iterations times. check Check results consistent. TRUE, checking done .equal(), FALSE checking disabled results stored. check function function called pair results determine consistency. memory TRUE (default R compiled memory profiling), track memory allocations using utils::Rprofmem(). FALSE disable memory tracking. filter_gc TRUE remove iterations contained least one garbage collection summarizing. TRUE expression garbage collection every iteration, filtering disabled, warning. relative TRUE summaries computed relative minimum execution time rather absolute time. time_unit NULL times reported human readable fashion depending value. one 'ns', 'us', 'ms', 's', 'm', 'h', 'd', 'w' time units instead expressed nanoseconds, microseconds, milliseconds, seconds, hours, minutes, days weeks respectively. exprs list quoted expressions. supplied overrides expressions defined .... env environment evaluate expressions","code":""},{"path":"https://bench.r-lib.org/dev/reference/mark.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Benchmark a series of functions — mark","text":"tibble additional summary columns. following summary columns computed expression - bench_expr deparsed expression evaluated (name one provided). min - bench_time minimum execution time. median - bench_time sample median execution time. itr/sec - double estimated number executions performed per second. mem_alloc - bench_bytes Total amount memory allocated R running expression. Memory allocated outside R heap, e.g. malloc() new directly tracked, take care avoid misinterpreting results running code may . gc/sec - double number garbage collections per second. n_itr - integer Total number iterations filtering garbage collections (filter_gc == TRUE). n_gc - double Total number garbage collections performed iterations. psudo-measure pressure garbage collector, varies greatly alternatives generally one fewer collections cause fewer allocation real usage. total_time - bench_time total time perform benchmarks. result - list list column object(s) returned evaluated expression(s). memory - list list column results Rprofmem(). time - list list column bench_time vectors evaluated expression. gc - list list column tibbles containing level garbage collection (0-2, columns) iteration (rows).","code":""},{"path":[]},{"path":"https://bench.r-lib.org/dev/reference/mark.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Benchmark a series of functions — mark","text":"","code":"dat <- data.frame(x = runif(100, 1, 1000), y=runif(10, 1, 1000)) mark(   min_time = .1,    dat[dat$x > 500, ],   dat[which(dat$x > 500), ],   subset(dat, x > 500)) #> # A tibble: 3 × 13 #>   expression           min median `itr/sec` mem_alloc `gc/sec` n_itr  n_gc #>   <bch:expr>        <bch:> <bch:>     <dbl> <bch:byt>    <dbl> <int> <dbl> #> 1 dat[dat$x > 500,… 26.8µs 28.6µs    33668.    4.15KB     23.9  2820     2 #> 2 dat[which(dat$x … 27.9µs 29.6µs    32494.    2.77KB     11.7  2789     1 #> 3 subset(dat, x > … 46.9µs   50µs    18840.    5.46KB     27.9  1352     2 #> # ℹ 5 more variables: total_time <bch:tm>, result <list>, memory <list>, #> #   time <list>, gc <list>"},{"path":"https://bench.r-lib.org/dev/reference/press.html","id":null,"dir":"Reference","previous_headings":"","what":"Run setup code and benchmarks across a grid of parameters — press","title":"Run setup code and benchmarks across a grid of parameters — press","text":"press() used run mark() across grid parameters press results together. parameters want set given named arguments grid possible combinations automatically created. code setup benchmark given one unnamed expression (often delimited \\{). replicates desired dummy variable can used, e.g. rep = 1:5 replicates.","code":""},{"path":"https://bench.r-lib.org/dev/reference/press.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run setup code and benchmarks across a grid of parameters — press","text":"","code":"press(..., .grid = NULL)"},{"path":"https://bench.r-lib.org/dev/reference/press.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run setup code and benchmarks across a grid of parameters — press","text":"... named, parameters define, unnamed expression run. one unnamed expression permitted. .grid pre-built grid values use, typically data.frame tibble. useful want benchmark subset possible combinations.","code":""},{"path":"https://bench.r-lib.org/dev/reference/press.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run setup code and benchmarks across a grid of parameters — press","text":"","code":"# Helper function to create a simple data.frame of the specified dimensions create_df <- function(rows, cols) {   as.data.frame(setNames(     replicate(cols, runif(rows, 1, 1000), simplify = FALSE),     rep_len(c(\"x\", letters), cols))) }  # Run 4 data sizes across 3 samples with 2 replicates (24 total benchmarks) press(   rows = c(1000, 10000),   cols = c(10, 100),   rep = 1:2,   {     dat <- create_df(rows, cols)     bench::mark(       min_time = .05,       bracket = dat[dat$x > 500, ],       which = dat[which(dat$x > 500), ],       subset = subset(dat, x > 500)     )   } ) #> Running with: #>    rows  cols   rep #> 1  1000    10     1 #> 2 10000    10     1 #> 3  1000   100     1 #> 4 10000   100     1 #> Warning: Some expressions had a GC in every iteration; so filtering is disabled. #> 5  1000    10     2 #> 6 10000    10     2 #> 7  1000   100     2 #> 8 10000   100     2 #> # A tibble: 24 × 16 #>    expression  rows  cols   rep      min   median `itr/sec` mem_alloc #>    <bch:expr> <dbl> <dbl> <int> <bch:tm> <bch:tm>     <dbl> <bch:byt> #>  1 bracket     1000    10     1   97.2µs  103.6µs   9290.    112.77KB #>  2 which       1000    10     1   90.5µs   95.1µs  10093.     53.87KB #>  3 subset      1000    10     1  121.6µs  127.7µs   7640.    124.63KB #>  4 bracket    10000    10     1  323.1µs    341µs   2811.      1.14MB #>  5 which      10000    10     1  263.4µs  279.3µs   3426.    575.37KB #>  6 subset     10000    10     1    390µs  480.1µs   1949.      1.25MB #>  7 bracket     1000   100     1    772µs  784.6µs   1255.    986.96KB #>  8 which       1000   100     1  680.5µs  700.2µs   1415.     397.9KB #>  9 subset      1000   100     1  813.8µs  844.7µs   1119.   1008.18KB #> 10 bracket    10000   100     1  128.4ms  128.4ms      7.79    9.71MB #> # ℹ 14 more rows #> # ℹ 8 more variables: `gc/sec` <dbl>, n_itr <int>, n_gc <dbl>, #> #   total_time <bch:tm>, result <list>, memory <list>, time <list>, #> #   gc <list>"},{"path":"https://bench.r-lib.org/dev/reference/scale_bench_expr.html","id":null,"dir":"Reference","previous_headings":"","what":"Position and color scales for bench_expr data — scale_bench_expr","title":"Position and color scales for bench_expr data — scale_bench_expr","text":"Default scales bench_expr class, added plots using bench_expr objects automatically.","code":""},{"path":"https://bench.r-lib.org/dev/reference/scale_bench_expr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Position and color scales for bench_expr data — scale_bench_expr","text":"","code":"scale_x_bench_expr(...)  scale_y_bench_expr(...)  scale_colour_bench_expr(   palette = scales::hue_pal(...),   ...,   aesthetics = \"colour\" )  scale_color_bench_expr(   palette = scales::hue_pal(...),   ...,   aesthetics = \"colour\" )"},{"path":"https://bench.r-lib.org/dev/reference/scale_bench_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Position scales for bench_time data — scale_bench_time","title":"Position scales for bench_time data — scale_bench_time","text":"Default scales bench_time class, added plots using bench_time objects automatically. Default scales bench_time class, added plots using bench_time objects automatically.","code":""},{"path":"https://bench.r-lib.org/dev/reference/scale_bench_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Position scales for bench_time data — scale_bench_time","text":"","code":"scale_x_bench_bytes(base = 10, ...)  scale_y_bench_bytes(base = 10, ...)  scale_x_bench_time(base = 10, ...)  scale_y_bench_time(base = 10, ...)"},{"path":"https://bench.r-lib.org/dev/reference/scale_bench_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Position scales for bench_time data — scale_bench_time","text":"base base logarithm, NULL instead use non-logarithmic scale.","code":""},{"path":"https://bench.r-lib.org/dev/reference/summary.bench_mark.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize mark results. — summary.bench_mark","title":"Summarize mark results. — summary.bench_mark","text":"Summarize mark results.","code":""},{"path":"https://bench.r-lib.org/dev/reference/summary.bench_mark.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize mark results. — summary.bench_mark","text":"","code":"# S3 method for class 'bench_mark' summary(object, filter_gc = TRUE, relative = FALSE, time_unit = NULL, ...)"},{"path":"https://bench.r-lib.org/dev/reference/summary.bench_mark.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize mark results. — summary.bench_mark","text":"object bench_mark object summarize. filter_gc TRUE remove iterations contained least one garbage collection summarizing. TRUE expression garbage collection every iteration, filtering disabled, warning. relative TRUE summaries computed relative minimum execution time rather absolute time. time_unit NULL times reported human readable fashion depending value. one 'ns', 'us', 'ms', 's', 'm', 'h', 'd', 'w' time units instead expressed nanoseconds, microseconds, milliseconds, seconds, hours, minutes, days weeks respectively. ... Additional arguments ignored.","code":""},{"path":"https://bench.r-lib.org/dev/reference/summary.bench_mark.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize mark results. — summary.bench_mark","text":"tibble additional summary columns. following summary columns computed expression - bench_expr deparsed expression evaluated (name one provided). min - bench_time minimum execution time. median - bench_time sample median execution time. itr/sec - double estimated number executions performed per second. mem_alloc - bench_bytes Total amount memory allocated R running expression. Memory allocated outside R heap, e.g. malloc() new directly tracked, take care avoid misinterpreting results running code may . gc/sec - double number garbage collections per second. n_itr - integer Total number iterations filtering garbage collections (filter_gc == TRUE). n_gc - double Total number garbage collections performed iterations. psudo-measure pressure garbage collector, varies greatly alternatives generally one fewer collections cause fewer allocation real usage. total_time - bench_time total time perform benchmarks. result - list list column object(s) returned evaluated expression(s). memory - list list column results Rprofmem(). time - list list column bench_time vectors evaluated expression. gc - list list column tibbles containing level garbage collection (0-2, columns) iteration (rows).","code":""},{"path":"https://bench.r-lib.org/dev/reference/summary.bench_mark.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize mark results. — summary.bench_mark","text":"filter_gc == TRUE (default) runs contain garbage collection removed summarizing. useful fast expressions majority runs contain gc. Call summary(filter_gc = FALSE) like compute summaries times, expressions lots allocations runs contain gc.","code":""},{"path":"https://bench.r-lib.org/dev/reference/summary.bench_mark.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize mark results. — summary.bench_mark","text":"","code":"dat <- data.frame(x = runif(10000, 1, 1000), y=runif(10000, 1, 1000))  # `bench::mark()` implicitly calls summary() automatically results <- bench::mark(   dat[dat$x > 500, ],   dat[which(dat$x > 500), ],   subset(dat, x > 500))  # However you can also do so explicitly to filter gc differently. summary(results, filter_gc = FALSE) #> # A tibble: 3 × 13 #>   expression           min median `itr/sec` mem_alloc `gc/sec` n_itr  n_gc #>   <bch:expr>         <bch> <bch:>     <dbl> <bch:byt>    <dbl> <int> <dbl> #> 1 dat[dat$x > 500, ] 147µs  155µs     3999.     375KB     26.0  1999    13 #> 2 dat[which(dat$x >… 133µs  141µs     4713.     258KB     22.0  2356    11 #> 3 subset(dat, x > 5… 197µs  210µs     2956.     493KB     27.7  1493    14 #> # ℹ 5 more variables: total_time <bch:tm>, result <list>, memory <list>, #> #   time <list>, gc <list>  # Or output relative times summary(results, relative = TRUE) #> # A tibble: 3 × 13 #>   expression           min median `itr/sec` mem_alloc `gc/sec` n_itr  n_gc #>   <bch:expr>         <dbl>  <dbl>     <dbl>     <dbl>    <dbl> <int> <dbl> #> 1 dat[dat$x > 500, ]  1.10   1.10      1.33      1.45     1.25  1986    13 #> 2 dat[which(dat$x >…  1      1         1.48      1        1     2345    11 #> 3 subset(dat, x > 5…  1.47   1.50      1         1.91     1.36  1479    14 #> # ℹ 5 more variables: total_time <bch:tm>, result <list>, memory <list>, #> #   time <list>, gc <list>"},{"path":"https://bench.r-lib.org/dev/reference/workout.html","id":null,"dir":"Reference","previous_headings":"","what":"Workout a group of expressions individually — workout","title":"Workout a group of expressions individually — workout","text":"Given block expressions {} workout() individually times expression group. workout_expressions() lower level function useful reading lists calls file.","code":""},{"path":"https://bench.r-lib.org/dev/reference/workout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Workout a group of expressions individually — workout","text":"","code":"workout(expr, description = NULL)  workout_expressions(exprs, env = parent.frame(), description = NULL)"},{"path":"https://bench.r-lib.org/dev/reference/workout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Workout a group of expressions individually — workout","text":"expr one expressions workout, use {} pass multiple expressions. description name label expression, supplied deparsed expression used. exprs list calls measure. env environment expressions evaluated.","code":""},{"path":"https://bench.r-lib.org/dev/reference/workout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Workout a group of expressions individually — workout","text":"","code":"workout({   x <- 1:1000   evens <- x %% 2 == 0   y <- x[evens]   length(y)   length(which(evens))   sum(evens) }) #> # A tibble: 6 × 3 #>   exprs                 process     real #>   <bch:expr>           <bch:tm> <bch:tm> #> 1 x <- 1:1000            3.83µs   6.44µs #> 2 evens <- x%%2 == 0    24.77µs  25.75µs #> 3 y <- x[evens]          5.34µs    6.2µs #> 4 length(y)              1.12µs   1.91µs #> 5 length(which(evens))   6.25µs   7.15µs #> 6 sum(evens)             2.39µs    3.1µs  # The equivalent to the above, reading the code from a file workout_expressions(as.list(parse(system.file(\"examples/exprs.R\", package = \"bench\")))) #> # A tibble: 6 × 3 #>   exprs                 process     real #>   <bch:expr>           <bch:tm> <bch:tm> #> 1 x <- 1:1000            2.62µs   4.05µs #> 2 evens <- x%%2 == 0    20.64µs   21.7µs #> 3 y <- x[evens]          5.39µs   6.44µs #> 4 length(y)               1.1µs   1.91µs #> 5 length(which(evens))   5.35µs    6.2µs #> 6 sum(evens)             2.22µs    3.1µs"},{"path":"https://bench.r-lib.org/dev/news/index.html","id":"bench-development-version","dir":"Changelog","previous_headings":"","what":"bench (development version)","title":"bench (development version)","text":"Fixed issue bench_time_trans() bench_bytes_trans() pretty breaks applied correctly (#140, @plietar, @simonpcouch). R >=4.0.0 now required, aligned tidyverse standards. Switched modern ggplot2 conventions internally (#141, @olivroy).","code":""},{"path":"https://bench.r-lib.org/dev/news/index.html","id":"bench-113","dir":"Changelog","previous_headings":"","what":"bench 1.1.3","title":"bench 1.1.3","text":"CRAN release: 2023-05-04 Long unnamed bench_expr expressions now truncated correctly used columns tibble (#94). bench_mark tibbles now respect knitr paged df option (#103). Fixed issue macOS specific C code paths accidentally used GNU Hurd (#118). Fixed -Wstrict-prototypes warnings, requested CRAN (#124). R >=3.5.0 now required, aligned tidyverse standards. bench now uses testthat 3e (#129). bench longer Suggests mockery.","code":""},{"path":"https://bench.r-lib.org/dev/news/index.html","id":"bench-112","dir":"Changelog","previous_headings":"","what":"bench 1.1.2","title":"bench 1.1.2","text":"CRAN release: 2021-11-30 Davis Vaughan now maintainer. autoplot.bench_mark() supports factor levels expression, intended (#82) bench::mark() bench::workout() longer support unquote splice operators. fixes inconsistencies performance results functions like rlang::list2() (#61). bench re-licensed MIT (#101).","code":""},{"path":"https://bench.r-lib.org/dev/news/index.html","id":"bench-111","dir":"Changelog","previous_headings":"","what":"bench 1.1.1","title":"bench 1.1.1","text":"CRAN release: 2020-01-13 mark() columns memory, result mem_alloc columns now always included, even unused.","code":""},{"path":"https://bench.r-lib.org/dev/news/index.html","id":"bench-110","dir":"Changelog","previous_headings":"","what":"bench 1.1.0","title":"bench 1.1.0","text":"CRAN release: 2020-01-10","code":""},{"path":"https://bench.r-lib.org/dev/news/index.html","id":"new-features-1-1-0","dir":"Changelog","previous_headings":"","what":"New features","title":"bench 1.1.0","text":"New bench_process_memory() function, return current maximum memory used current process. uses system functions track memory, can measure memory outside R’s GC heap. New workout_expressions() function, low-level function workout list expressions, like obtained via parse() file. mark() gains memory argument control records memory allocations, set memory = FALSE disable recording memory allocations, can helpful trying benchmark long pieces code many allocations (#62).","code":""},{"path":"https://bench.r-lib.org/dev/news/index.html","id":"minor-improvements-and-fixes-1-1-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and fixes","title":"bench 1.1.0","text":"mark() now permits empty arguments, e.g. accidental trailing commas (#61). mark() now errors correctly expressions deparsed length different. bench_expr objects now work better upcoming versions tibble vctrs (@romainfrancois, #64) autoplot.bench_mark() provides informative error ggbeeswarm package installed (@coatless, #69). Update documentation bench_mark columns (@jdblischak, #67).","code":""},{"path":"https://bench.r-lib.org/dev/news/index.html","id":"bench-104","dir":"Changelog","previous_headings":"","what":"bench 1.0.4","title":"bench 1.0.4","text":"CRAN release: 2019-09-06 bench_memory() examples longer fail run R memory profiling capability (#56). bench_expr now class c(\"bench_expr\", \"list\") rather c(\"bench_expr\", \"expression\"), really list calls rather true expression object. (https://github.com/r-lib/vctrs/issues/559)","code":""},{"path":"https://bench.r-lib.org/dev/news/index.html","id":"bench-103","dir":"Changelog","previous_headings":"","what":"bench 1.0.3","title":"bench 1.0.3","text":"CRAN release: 2019-08-28 summary.bench_mark() gains time_unit argument, can report times consistent scale desired (#18, #26). bench_mark() now checks user interrupts, allow stop benchmarking takes longer expecting (#49). New bench_memory() capture just memory allocated expression. bench_time() now alias system_time(). unnest.bench_mark() now compatible upcoming tidyr 1.0.0 (#48, #51) New hires_time() allows explicitly capture high resolution time points.","code":""},{"path":"https://bench.r-lib.org/dev/news/index.html","id":"bench-102","dir":"Changelog","previous_headings":"","what":"bench 1.0.2","title":"bench 1.0.2","text":"CRAN release: 2019-04-29 workout() new function makes timing multiple expressions turn simpler. mark() now internally uses tempfile rather textConnection, latter 100,000 character limit platforms (#27) mark() longer returns mean max values column order tweaked try put interesting columns first (#37) Errors evaluation now halt execution (#28, #43) scale_bench_time() scale_bench_bytes() now allow use non-logarithmic scale.","code":""},{"path":"https://bench.r-lib.org/dev/news/index.html","id":"bench-101","dir":"Changelog","previous_headings":"","what":"bench 1.0.1","title":"bench 1.0.1","text":"CRAN release: 2018-06-06 Add support macOS versions prior 10.12 Disable load sensitive tests CRAN, avoid failures","code":""},{"path":"https://bench.r-lib.org/dev/news/index.html","id":"bench-100","dir":"Changelog","previous_headings":"","what":"bench 1.0.0","title":"bench 1.0.0","text":"CRAN release: 2018-05-27 Added NEWS.md file track changes package.","code":""}]
